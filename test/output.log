 0) ALL.......: \*
 1) NMCHAR....: [_a-zA-Z0-9-]
 2) NMSTART...: [_a-zA-Z]
 3) IDENT.....: [_a-zA-Z][_a-zA-Z0-9-]*
 4) ID........: #[_a-zA-Z][_a-zA-Z0-9-]*
 5) CLASS.....: \.[_a-zA-Z][_a-zA-Z0-9-]*
 6) CLASSES...: (\.[_a-zA-Z][_a-zA-Z0-9-]*)+
 7) STRING1...: "([\s\u0021\u0023-\u007e\u00a1-\u0860]*)"
 8) STRING2...: '([\s\u0021-\u0026\u0028-\u007e\u00a1-\u0860]*)'
 9) STRING3...: ([A-Za-z0-9-_]+)
10) STRING....: "([\s\u0021\u0023-\u007e\u00a1-\u0860]*)"|'([\s\u0021-\u0026\u0028-\u007e\u00a1-\u0860]*)'|([A-Za-z0-9-_]+)
11) EQUALS....: \s*(\^=|\*=|\$=|\|=|\~=|=)\s*
12) ATTR......: \[([_a-zA-Z][_a-zA-Z0-9-]*)(\s*(\^=|\*=|\$=|\|=|\~=|=)\s*("([\s\u0021\u0023-\u007e\u00a1-\u0860]*)"|'([\s\u0021-\u0026\u0028-\u007e\u00a1-\u0860]*)'|([A-Za-z0-9-_]+)))?\]\s*
13) ELMT......: ([_a-zA-Z][_a-zA-Z0-9-]*|\*)((#[_a-zA-Z][_a-zA-Z0-9-]*)?((\.[_a-zA-Z][_a-zA-Z0-9-]*)+)?(\[([_a-zA-Z][_a-zA-Z0-9-]*)(\s*(\^=|\*=|\$=|\|=|\~=|=)\s*("([\s\u0021\u0023-\u007e\u00a1-\u0860]*)"|'([\s\u0021-\u0026\u0028-\u007e\u00a1-\u0860]*)'|([A-Za-z0-9-_]+)))?\]\s*)?)*
14) ELMT_RESTRICTION: (#[_a-zA-Z][_a-zA-Z0-9-]*)|((\.[_a-zA-Z][_a-zA-Z0-9-]*)+)|(\[([_a-zA-Z][_a-zA-Z0-9-]*)(\s*(\^=|\*=|\$=|\|=|\~=|=)\s*("([\s\u0021\u0023-\u007e\u00a1-\u0860]*)"|'([\s\u0021-\u0026\u0028-\u007e\u00a1-\u0860]*)'|([A-Za-z0-9-_]+)))?\]\s*)
15) COMBINATORS: (\s*\+\s*)|(\s*~\s*)|(\s*>\s*)|(\s+)


Test de ID para "#elmt #main-id"
match: "#elmt"
  parsed: "elmt"
match: "#main-id"
  parsed: "main-id"

Test de CLASSES para ".class.ELMT .otra.class.mas"
match: ".class.ELMT"
  01) ".ELMT"
  parsed: "[ 'class', 'elmt' ]"
match: ".otra.class.mas"
  01) ".mas"
  parsed: "[ 'otra', 'class', 'mas' ]"

Test de STRING para "texto libre "texto dobles comillas" 'texto comillas simples'"
match: "texto"
  01) ""
  02) ""
  03) "texto"
  parsed: "texto"
match: "libre"
  01) ""
  02) ""
  03) "libre"
  parsed: "libre"
match: ""texto dobles comillas""
  01) "texto dobles comillas"
  02) ""
  03) ""
  parsed: "texto dobles comillas"
match: "'texto comillas simples'"
  01) ""
  02) "texto comillas simples"
  03) ""
  parsed: "texto comillas simples"

Test de EQUALS para "= *= ~="
match: "= "
  01) "="
  parsed: "="
match: "*= "
  01) "*="
  parsed: "*="
match: "~="
  01) "~="
  parsed: "~="

Test de ATTR para "[attr] [attr="value"] [attr=value] [attr='value']"
match: "[attr] "
  01) "attr"
  02) ""
  03) ""
  04) ""
  05) ""
  06) ""
  07) ""
  parsed: "{ ELMT: 'attr', operator: null, value: null }"
match: "[attr="value"] "
  01) "attr"
  02) "="value""
  03) "="
  04) ""value""
  05) "value"
  06) ""
  07) ""
  parsed: "{ ELMT: 'attr', operator: '=', value: 'value' }"
match: "[attr=value] "
  01) "attr"
  02) "=value"
  03) "="
  04) "value"
  05) ""
  06) ""
  07) "value"
  parsed: "{ ELMT: 'attr', operator: '=', value: 'value' }"
match: "[attr='value']"
  01) "attr"
  02) "='value'"
  03) "="
  04) "'value'"
  05) ""
  06) "value"
  07) ""
  parsed: "{ ELMT: 'attr', operator: '=', value: 'value' }"

Test de ELMT_RESTRICTION para "#id.class[attr]"
match: "#id"
  01) "#id"
  02) ""
  03) ""
  04) ""
  05) ""
  06) ""
  07) ""
  08) ""
  09) ""
  10) ""
  11) ""
  parsed: "{ id: 'id', classes: null, attr: null }"
match: ".class"
  01) ""
  02) ".class"
  03) ".class"
  04) ""
  05) ""
  06) ""
  07) ""
  08) ""
  09) ""
  10) ""
  11) ""
  parsed: "{ id: null, classes: [Array], attr: null }"
match: "[attr]"
  01) ""
  02) ""
  03) ""
  04) "[attr]"
  05) "attr"
  06) ""
  07) ""
  08) ""
  09) ""
  10) ""
  11) ""
  parsed: "{ id: null, classes: null, attr: [Object] }"

Test de ELMT para "ELMT#id.class[attr] *.alerts"
match: "ELMT#id.class[attr] "
  01) "ELMT"
  02) "#id.class[attr] "
  03) "#id"
  04) ".class"
  05) ".class"
  06) "[attr] "
  07) "attr"
  08) ""
  09) ""
  10) ""
  11) ""
  12) ""
  13) ""
  parsed: "{ elmt: 'elmt', classes: [Array], attrs: [Array], id: 'id' }"
match: "*.alerts"
  01) "*"
  02) ".alerts"
  03) ""
  04) ".alerts"
  05) ".alerts"
  06) ""
  07) ""
  08) ""
  09) ""
  10) ""
  11) ""
  12) ""
  13) ""
  parsed: "{ elmt: '*', classes: [Array], attrs: null, id: null }"

Test de COMBINATORS para "para > por  + segun  ~ sin mas"
match: " > "
  01) ""
  02) ""
  03) " > "
  04) ""
  parsed: ">"
match: "  + "
  01) "  + "
  02) ""
  03) ""
  04) ""
  parsed: "+"
match: "  ~ "
  01) ""
  02) "  ~ "
  03) ""
  04) ""
  parsed: "~"
match: " "
  01) ""
  02) ""
  03) ""
  04) " "
  parsed: " "

Test de parser <ELMT, ID, CLASSES, ATTR, COMBINATORS> para "DIV.main > input[type=button]"
{
  type: 13,
  name: 'ELMT',
  value: { elmt: 'div', classes: [ 'main' ], attrs: null, id: null }
}
{ type: 15, name: 'COMBINATORS', value: '>' }
{
  type: 13,
  name: 'ELMT',
  value: {
    elmt: 'input',
    classes: null,
    attrs: [ { ELMT: 'type', operator: '=', value: 'button' } ],
    id: null
  }
}
